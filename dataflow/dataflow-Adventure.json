{
	"name": "dataflow-Adventure",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "dssilver",
						"type": "DatasetReference"
					},
					"name": "Silver"
				},
				{
					"dataset": {
						"referenceName": "ds_saleGold",
						"type": "DatasetReference"
					},
					"name": "SalesGold"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_gold",
						"type": "DatasetReference"
					},
					"name": "Gold"
				},
				{
					"dataset": {
						"referenceName": "ds_adventurefinal",
						"type": "DatasetReference"
					},
					"name": "AdventureWorks"
				}
			],
			"transformations": [
				{
					"name": "DerivedColumn"
				},
				{
					"name": "Select"
				},
				{
					"name": "Aggregate"
				},
				{
					"name": "Join"
				},
				{
					"name": "AlterRow"
				}
			],
			"scriptLines": [
				"source(output(",
				"          SalesOrderID as string,",
				"          RevisionNumber as string,",
				"          OrderDate as date,",
				"          DueDate as string,",
				"          ShipDate as string,",
				"          Status as string,",
				"          OnlineOrderFlag as string,",
				"          SalesOrderNumber as string,",
				"          PurchaseOrderNumber as string,",
				"          AccountNumber as string,",
				"          CustomerID as string,",
				"          SalesPersonID as string,",
				"          TerritoryID as string,",
				"          BillToAddressID as string,",
				"          ShipToAddressID as string,",
				"          ShipMethodID as string,",
				"          CreditCardID as string,",
				"          CreditCardApprovalCode as string,",
				"          CurrencyRateID as string,",
				"          SubTotal as string,",
				"          TaxAmt as string,",
				"          Freight as string,",
				"          TotalDue as integer,",
				"          Comment as string,",
				"          rowguid as string,",
				"          ModifiedDate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Silver",
				"source(output(",
				"          SalesOrderID as string,",
				"          OrderDate as string,",
				"          Year as integer,",
				"          CustomerID as string,",
				"          TotalDue as string,",
				"          ModifiedDate as string,",
				"          LoadTimeStamp as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SalesGold",
				"Silver derive(Year = year(toTimestamp(OrderDate)),",
				"          LoadTimeStamp = currentTimestamp()) ~> DerivedColumn",
				"Aggregate select(mapColumn(",
				"          OrderDate,",
				"          SalesOrderID,",
				"          Year,",
				"          CustomerID,",
				"          TotalDue,",
				"          ModifiedDate,",
				"          LoadTimeStamp,",
				"          {Daily Sales Volume}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Select",
				"DerivedColumn aggregate(groupBy(OrderDate,",
				"          SalesOrderID,",
				"          CustomerID,",
				"          TotalDue,",
				"          Year,",
				"          LoadTimeStamp,",
				"          ModifiedDate),",
				"     {Daily Sales Volume} = sum(TotalDue)) ~> Aggregate",
				"Silver, SalesGold join(Silver@SalesOrderID == SalesGold@SalesOrderID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> Join",
				"Join alterRow(insertIf(isNull(SalesGold@SalesOrderID))) ~> AlterRow",
				"Select sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> Gold",
				"AlterRow sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          SalesOrderID as string,",
				"          OrderDate as string,",
				"          Year as integer,",
				"          CustomerID as string,",
				"          TotalDue as string,",
				"          ModifiedDate as string,",
				"          LoadTimeStamp as timestamp",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> AdventureWorks"
			]
		}
	}
}